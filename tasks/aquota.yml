# Copyright 2019-2025 Chris Croome
#
# This file is part of the Webarchitects quota Ansible role.
#
# The Webarchitects quota Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects quota Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects quota Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Enable and configue quotas using aquota
  block:

    - name: Manual intervention needed to upgrade ext2 to ext4
      ansible.builtin.fail:
        msg:
          - "Please manually unmount the {{ quota_dir }} directory (stop services that run from it, unmount things mounted on it etc) and then run:"
          - "tune2fs -O extents,uninit_bg,dir_index,has_journal {{ quota_device }}"
          - "e2fsck -pf {{ quota_device }}"
          - "Then edit the filesystem version in /etc/fstab and reboot the server and re-run this role."
      when: quota_device_fstype == "ext2"

    - name: Manual intervention needed to upgrade ext3 to ext4
      ansible.builtin.fail:
        msg:
          - "Please manually unmount the {{ quota_dir }} directory (stop services that run from it, unmount things mounted on it etc) and then run:"
          - "tune2fs -O extents,uninit_bg,dir_index {{ quota_device }}"
          - "e2fsck -pf {{ quota_device }}"
          - "Then edit the filesystem version in /etc/fstab and reboot the server and re-run this role."
      when: quota_device_fstype == "ext3"

    - name: Update /etc/fstab to ensure quota, usrjquota=aquota.user and jqfmt=vfsv0 are included in device options
      block:

        - name: Debug exists device options
          ansible.builtin.debug:
            var: quota_device_options
            verbosity: 2

        - name: Set a fact for the list of required options in /etc/fstab
          ansible.builtin.set_fact:
            quota_device_aquota_options: "{{ quota_device_options | union(quota_device_aquota_options_required) | join(',') }}"

        - name: Debug list of required options in /etc/fstab
          ansible.builtin.debug:
            var: quota_device_aquota_options
            verbosity: 2

        - name: Quota device remounted with required options
          ansible.posix.mount:
            path: "{{ quota_dir }}"
            src: "{{ quota_device }}"
            fstype: "{{ quota_device_fstype }}"
            opts: "{{ quota_device_aquota_options }}"
            state: present
          register: quota_aquota_fstab_updated

        - name: Reboot
          ansible.builtin.reboot:
            msg: "The server is being rebooted to ensure that the quota options are applied to {{ quota_device }}"
          when: (quota_aquota_fstab_updated is defined) and (quota_aquota_fstab_updated.changed | bool)

        - name: Include quota check tasks
          ansible.builtin.include_tasks: checks.yml

      when: ("quota" not in quota_device_options) or ("usrjquota=aquota.user" not in quota_device_options) or ("jqfmt=vfsv0" not in quota_device_options)

    - name: "{{ quota_device }}:{{ quota_name }} present in /etc/quotatab"
      ansible.builtin.lineinfile:
        dest: /etc/quotatab
        line: "{{ quota_device }}:{{ quota_name }}"
        state: present
      notify: Restart quota

    - name: "Touch {{ quota_dir }}/aquota.user"
      ansible.builtin.file:
        path: "{{ quota_dir }}/aquota.user"
        state: touch
        access_time: preserve
        modification_time: preserve
        owner: root
        group: root
        mode: "0600"
      notify: Restart quota

    - name: Quota enabled and running
      ansible.builtin.systemd_service:
        name: quota
        state: started

    - name: "Run quotaon {{ quota_dir }}"
      ansible.builtin.command: "quotaon {{ quota_dir }}"
      register: quota_quotaon
      changed_when: true
      when: not quota_enabled
      failed_when: ("Cannot find filesystem to check or filesystem not mounted with quota option" in quota_quotaon.stdout)

    - name: Debug quotaon results
      ansible.builtin.debug:
        var: quota_quotaon
        verbosity: 2
      when: quota_quotaon is defined

    - name: "Set the gracetimes for {{ quota_dir }}"
      ansible.builtin.command: "setquota -t {{ quota_grace_block }} {{ quota_grace_inode }} {{ quota_dir }}"
      changed_when: true
      when:
        - quota_quotaon is defined
        - ((quota_existing_grace_block | int) != (quota_grace_block | int)) or ((quota_existing_grace_inode | int) != (quota_grace_inode | int))

    - name: Quota warning config in place
      ansible.builtin.template:
        src: warnquota.conf.j2
        dest: /etc/warnquota.conf
        owner: root
        group: root
        mode: "0644"

    - name: Quota warning defaults in place
      ansible.builtin.template:
        src: quota.j2
        dest: /etc/default/quota
        owner: root
        group: root
        mode: "0644"

    - name: Warn that a reboot might be needed
      ansible.builtin.debug:
        msg: "You might need to reboot this server before the disk quotas are applied"
      when: not quota_enabled

  tags:
    - quota
...
